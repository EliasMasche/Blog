@using LinkDotNet.Blog.Domain
@using LinkDotNet.Blog.Infrastructure.Persistence
@inject IRepository<Skill> Repository
<div>
        @if (ShowAdminActions)
        {
            <button type="button" class="btn btn-primary" @onclick="() => AddSkillDialog.Open()">
                <i class="plus"></i> Add skill</button>
            <AddSkillDialog @ref="AddSkillDialog" SkillAdded="@AddSkill"></AddSkillDialog>
        }
    </div>
<div class="table-responsive">
	<table class="table w-100 mt-3 align-top" id="skill-table">
		<thead>
		<tr>
			<th class="w-10">Capability</th>
			<th class="w-30">Familiar with</th>
			<th class="w-30">Proficient</th>
			<th class="w-30">Expert</th>
		</tr>
		</thead>
        <tbody>
        @foreach (var skillCapabilityGroup in skills.GroupBy(s => s.Capability))
        {
            <tr ondragover="event.preventDefault();">
                <td>@skillCapabilityGroup.Key</td>
                @foreach (var skillLevel in ProficiencyLevel.All)
                {
	                <td @ondrop="@(() => HandleDrop(skillLevel))" class="border-top align-top" style="min-width: 100px;">
                        @foreach (var skill in skillCapabilityGroup.Where(s => s.ProficiencyLevel == skillLevel))
                        {
                            if (ShowAdminActions)
                            {
	                            <div draggable="true"
	                                 @ondrag="@(() => currentDragItem = skill)"
	                                 class="d-inline-block me-2 my-2 px-2 py-1 rounded bg-light"
	                                 style="background-color: var(--tag-background); cursor: grab; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                    <SkillTag Skill="@skill"
                                              ShowAdminActions="@true"
                                              DeleteSkill="@(() => DeleteSkill(skill))"/>
                                </div>
                            }
                            else
                            {
	                            <div class="d-inline-block me-2 my-2">
                                    <SkillTag Skill="@skill"/>
                                </div>
                            }
                        }
                    </td>
                }
            </tr>
        }
        </tbody>
    </table>
    @if (ShowAdminActions)
    {
	    <small class="form-text text-muted">You can drag and drop your skills from one proficiency to another</small>
    }
</div>
@code {
    [Parameter]
    public bool ShowAdminActions { get; set; }

    private AddSkillDialog AddSkillDialog { get; set; } = default!;

    private List<Skill> skills = [];

    private Skill? currentDragItem;

    protected override async Task OnInitializedAsync()
    {
        skills = (await Repository.GetAllAsync()).ToList();
    }

    private async Task AddSkill(Skill skillToAdd)
    {
        skills.Add(skillToAdd);
        await Repository.StoreAsync(skillToAdd);
    }

    private async Task DeleteSkill(Skill skill)
    {
        skills.Remove(skill);
        await Repository.DeleteAsync(skill.Id);
    }

    private async Task HandleDrop(ProficiencyLevel proficiencyLevel)
    {
        if (currentDragItem is null || currentDragItem.ProficiencyLevel == proficiencyLevel)
        {
            return;
        }

        currentDragItem.SetProficiencyLevel(proficiencyLevel);
        await Repository.StoreAsync(currentDragItem);
        currentDragItem = null;
    }

}
